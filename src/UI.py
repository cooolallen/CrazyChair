# ui generated by pyuic5 MainWindow.ui -o ui_MainWindow.py

from PyQt5.QtWidgets import QMainWindow, QDialog, QShortcut

from UIs.ui_MainWindow import Ui_MainWindow
from UIs.ui_RecordData import Ui_DataRecorder
from PyQt5.QtCore import QTimer
from PyQt5.QtGui import QPixmap, QKeySequence

from ArduinoTest import ArduinoTest
import Constants

import serial
import struct
from os.path import join

class MainWindow(QMainWindow):
	def __init__(self, test=False, port=None, parent=None):
		super(MainWindow, self).__init__(parent)
		self.ui = Ui_MainWindow()
		self.ui.setupUi(self)
		self.ledOn = False
		self.voltageTimer = QTimer()
		self.voltageTimer.start(100)		# update every 0.1 second
		self.init = False					# will be removed when hand-shake is added

		# check it is test mode or not (arduino don't need to connect)
		if test:
			self.arduino = ArduinoTest()
		else:
			self.arduino = serial.Serial(port, 9600, timeout=.1)

		# Connection
		self.ui.ledButton.clicked.connect(self.ledButtonClicked)
		self.voltageTimer.timeout.connect(self.voltageUpdate)
		self.ui.actionRecord_Data.triggered.connect(self.recordData)

		# ShortCut
		self.ui.actionRecord_Data.setShortcut("Ctrl+D")

		# Show the main window
		self.show()

	def ledButtonClicked(self):
		value = b'0' if self.ledOn else b'1'
		msg = 'Off' if self.ledOn else 'On'
		self.arduino.write(value)
		self.ledOn = not self.ledOn
		self.ui.ledButton.setText(msg)

	def voltageUpdate(self):
		# skip the first update to making sure we get the whole string
		if not self.init:
			self.init = True
			return

		data = self.arduino.readline().decode('utf-8')
		if data:
			self.ui.voltage.setText(data)
			# send the message as raw binary
			# self.arduino.write(struct.pack('>B',led_out))

	def recordData(self):
		dialog = DataRecorder(self)

class DataRecorder(QDialog):
	def __init__(self, parent=None):
		super(QDialog, self).__init__(parent)
		self.ui = Ui_DataRecorder()
		self.ui.setupUi(self)
		self.arduino = parent.arduino


		# Connection
		self.ui.ComboClass.currentIndexChanged.connect(self.setPosturePicture)


		# show the window
		self.show()

	def setPosturePicture(self, value):
		filename = str(value) + '.png'
		self.ui.imageHolder.setPixmap(QPixmap(join(Constants.IMG_DIR, filename)))
		self.ui.imageHolder.show()
